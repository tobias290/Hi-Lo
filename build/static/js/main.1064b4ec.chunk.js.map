{"version":3,"sources":["public/javascripts/apiService.js","public/javascripts/pages/HostJoin.js","public/javascripts/GamePhase.js","public/javascripts/PlayerTurnPhase.js","public/javascripts/components/PlayersJoining.js","public/javascripts/components/Card.js","public/javascripts/components/PlayerBoard.js","public/javascripts/components/CardStacks.js","public/javascripts/pages/Game.js","public/javascripts/pages/App.js","public/javascripts/serviceWorker.js","public/javascripts/index.js"],"names":["ApiService","url","queryParams","Object","entries","key","value","substring","length","Promise","resolve","reject","fetch","then","resp","json","catch","err","console","error","BASE_URL","window","location","origin","WS_BASE_URL","hostname","URLS","hostGame","joinGame","gameState","gameCode","startGame","pickStartingCard","takeCardIntoHand","placeCardOnBoard","revealCardOnBoard","startNextRound","endGame","WS_URLS","game","HostJoin","props","state","showHostGameForm","showJoinGameForm","failedToJoinGame","errorMessage","hostPlayerNameInput","React","createRef","joinPlayerNameInput","joinGameCode","bind","event","preventDefault","get","player","this","current","player_name","game_code","setState","toUpperCase","success","className","onClick","onSubmit","name","type","placeholder","required","minLength","ref","style","margin","pattern","maxLength","textTransform","Component","GamePhase","PLAYERS_JOINING","PLAYERS_PICKING_STARTING_CARDS","PLAYER_TURN","FINAL_ROUND","ROUND_END","GAME_END","PlayerTurnPhase","PICKING_CARD","PLACING_CARD","REVEAL_CARD","PlayersJoining","players","playersTop","playersBottom","filter","playerName","slice","map","playerIsHost","Card","card","onResize","windowHeight","innerHeight","windowWidth","innerWidth","windowSize","height","width","fontSize","addEventListener","isPlaceholder","renderPlaceholder","renderBackSide","renderFaceSide","isInteractable","background","getCardColor","underlineCard","defaultProps","PlayerBoard","renderCards","cardsInteractable","getCardAction","placeCard","flipCard","renderer","cards","i","j","board","push","cardColumn","cardRow","isClientsPlayersTurn","currentPhase","currentPlayerTurnIndex","turnPhase","faceUp","column","row","small","displayMessage","customDisplayMessage","centerMessage","overallScore","visibleScore","noOfFaceUpCards","CardStacks","deck","clientPlayerPickCard","clientPlayerDiscardCard","discardCardFromHand","undefined","cardInHand","title","stack","discard","Game","checkedForPlayerHost","updateGameState","getClientPlayer","isClientPlayersTurn","ws","WebSocket","data","JSON","parse","reload","close","prevProps","prevState","snapshot","isHost","hasOwnProperty","noGameExists","message","find","indexOf","getGameMessage","sort","a","b","App","showHostJoinPage","sessionStorage","gameDetails","getItem","setItem","stringify","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1064b4ec.chunk.js","sourcesContent":["export default class ApiService {\r\n    //static BASE_URL = \"http://192.168.1.123:8000/game\"; // For Development\r\n    //static WS_BASE_URL = \"ws://192.168.1.123:8000/ws\";\r\n\r\n    static BASE_URL = `${window.location.origin}/game`; // For Building\r\n    static WS_BASE_URL = `wss://${window.location.hostname}/ws`;\r\n\r\n    static URLS = {\r\n        hostGame: ApiService.BASE_URL + \"/host\",\r\n        joinGame: ApiService.BASE_URL + \"/join\",\r\n        gameState: (gameCode) => ApiService.BASE_URL + `/${gameCode}/state`,\r\n        startGame: (gameCode) => ApiService.BASE_URL + `/${gameCode}/start`,\r\n        pickStartingCard: (gameCode) => ApiService.BASE_URL + `/${gameCode}/pick-starting-card`,\r\n        takeCardIntoHand: (gameCode) => ApiService.BASE_URL + `/${gameCode}/turn-pick-card`,\r\n        placeCardOnBoard: (gameCode) => ApiService.BASE_URL + `/${gameCode}/turn-place-card`,\r\n        revealCardOnBoard: (gameCode) => ApiService.BASE_URL + `/${gameCode}/turn-reveal-card`,\r\n        startNextRound: (gameCode) => ApiService.BASE_URL + `/${gameCode}/start-next-round`,\r\n        endGame: (gameCode) => ApiService.BASE_URL + `/${gameCode}/end-game`,\r\n    };\r\n\r\n    static WS_URLS = {\r\n        game: (gameCode) => `${ApiService.WS_BASE_URL}/${gameCode}`,\r\n    }\r\n\r\n    static get(url, queryParams = {}) {\r\n        url += \"?\";\r\n\r\n        for (let [key, value] of Object.entries(queryParams))\r\n            url += `${key}=${value}&`;\r\n\r\n        url = url.substring(0, url.length - 1); // Remove last '&' character\r\n\r\n        return new Promise((resolve, reject) =>  {\r\n            fetch(url)\r\n                .then(resp => resp.json())\r\n                .then(resp => resolve(resp))\r\n                .catch((err) => {\r\n                    console.error(err);\r\n                    reject(err);\r\n                });\r\n        });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ApiService from \"../apiService\";\r\n\r\nexport default class HostJoin extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showHostGameForm: false,\r\n            showJoinGameForm: false,\r\n            failedToJoinGame: false,\r\n            errorMessage: \"\",\r\n        }\r\n\r\n        this.hostPlayerNameInput = React.createRef();\r\n        this.joinPlayerNameInput = React.createRef();\r\n        this.joinGameCode = React.createRef();\r\n\r\n        this.hostGame = this.hostGame.bind(this);\r\n        this.joinGame = this.joinGame.bind(this);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * Sets up a game. Making the user the host.\r\n     */\r\n    hostGame(event) {\r\n        event.preventDefault();\r\n\r\n        ApiService\r\n            .get(ApiService.URLS.hostGame, {player: this.hostPlayerNameInput.current.value}) // TODO: Fill in\r\n            .then(resp => this.props.joinGame(resp.player_name, resp.game_code));\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * Joins an existing game.\r\n     */\r\n    joinGame(event) {\r\n        event.preventDefault();\r\n        this.setState({failedToJoinGame: false}); // Reset errors\r\n\r\n        ApiService\r\n            .get(ApiService.URLS.joinGame, {player: this.joinPlayerNameInput.current.value, gameCode: this.joinGameCode.current.value.toUpperCase()}) // TODO: Fill  in\r\n            .then(resp => {\r\n                if (resp.success)\r\n                    this.props.joinGame(resp.player_name, resp.game_code);\r\n                else\r\n                    this.setState({failedToJoinGame: true, errorMessage: resp.error});\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <h1 className=\"title\">Hi-LO</h1>\r\n\r\n                {\r\n                    !this.state.showHostGameForm && !this.state.showJoinGameForm &&\r\n                    <div className=\"options\">\r\n                        <button className=\"button button--x-large\" onClick={() => this.setState({showHostGameForm: true})}>Host Game</button>\r\n                        <button className=\"button button--x-large\" onClick={() => this.setState({showJoinGameForm: true})}>Join Game</button>\r\n                    </div>\r\n                }\r\n\r\n                {\r\n                    this.state.showHostGameForm &&\r\n                    <form className=\"options form\" onSubmit={this.hostGame}>\r\n                        <input\r\n                            className=\"form__input form__input--x-large\"\r\n                            name=\"player\"\r\n                            type=\"text\"\r\n                            placeholder=\"Player Name\"\r\n                            required\r\n                            minLength=\"3\"\r\n                            ref={this.hostPlayerNameInput}\r\n                        />\r\n                        <div>\r\n                            <input\r\n                                className=\"button button--x-large\"\r\n                                type=\"button\"\r\n                                value=\"Back\"\r\n                                onClick={() => this.setState({showHostGameForm: false, showJoinGameForm: false})}\r\n                            />\r\n                            &nbsp;&nbsp;\r\n                            <input\r\n                                className=\"button button--x-large\"\r\n                                type=\"submit\"\r\n                                value=\"Host\"\r\n                            />\r\n                        </div>\r\n                    </form>\r\n                }\r\n\r\n                {\r\n                    this.state.showJoinGameForm &&\r\n                    <form className=\"options form\" onSubmit={this.joinGame}>\r\n                        {\r\n                            this.state.failedToJoinGame &&\r\n                            <h2 className=\"error\" style={{margin: 0}}>{this.state.errorMessage}</h2>\r\n                        }\r\n                        <input\r\n                            className=\"form__input form__input--x-large\"\r\n                            name=\"player\"\r\n                            type=\"text\"\r\n                            placeholder=\"Player Name\"\r\n                            required\r\n                            minLength=\"3\"\r\n                            ref={this.joinPlayerNameInput}\r\n                        />\r\n                        <input\r\n                            className=\"form__input form__input--x-large form__input--text-center\"\r\n                            name=\"code\"\r\n                            type=\"text\"\r\n                            placeholder=\"Game Code\"\r\n                            pattern=\"[A-Za-z][A-ZA-Za-z][A-ZA-Za-z][A-ZA-Za-z]\"\r\n                            required\r\n                            minLength=\"4\"\r\n                            maxLength=\"4\"\r\n                            style={{textTransform: \"uppercase\"}}\r\n                            ref={this.joinGameCode}\r\n                        />\r\n                        <div>\r\n                            <input\r\n                                className=\"button button--x-large\"\r\n                                type=\"button\"\r\n                                value=\"Back\"\r\n                                onClick={() => this.setState({showHostGameForm: false, showJoinGameForm: false})}\r\n                            />\r\n                            &nbsp;&nbsp;\r\n                            <input\r\n                                className=\"button button--x-large\"\r\n                                type=\"submit\"\r\n                                value=\"Join\"\r\n                            />\r\n                        </div>\r\n                    </form>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nHostJoin.propTypes = {\r\n    joinGame: PropTypes.func,\r\n}\r\n","export default class GamePhase {\r\n    static PLAYERS_JOINING = 0;\r\n    static PLAYERS_PICKING_STARTING_CARDS = 1;\r\n    static PLAYER_TURN = 2;\r\n    static FINAL_ROUND = 3;\r\n    static ROUND_END = 4;\r\n    static GAME_END = 5;\r\n}\r\n","export default class PlayerTurnPhase {\r\n    static PICKING_CARD = 0;\r\n    static PLACING_CARD = 1;\r\n    static REVEAL_CARD = 2;\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ApiService from \"../apiService\";\r\n\r\n\r\n\r\nexport default class PlayersJoining extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            errorMessage: \"\",\r\n        };\r\n\r\n        this.players = this.players.bind(this);\r\n        this.playersTop = this.playersTop.bind(this);\r\n        this.playersBottom = this.playersBottom.bind(this);\r\n        this.startGame = this.startGame.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Starts the game.\r\n     */\r\n    startGame() {\r\n        ApiService\r\n            .get(ApiService.URLS.startGame(this.props.gameCode))\r\n            .then(resp => {\r\n                if (!resp.success)\r\n                    this.setState({errorMessage: resp.error});\r\n            })\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * @returns {*[]} - Returns list of players.\r\n     */\r\n    players() {\r\n        return this.props.players.filter(player => player.name !== this.props.playerName);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * @returns {*[]} - Returns list of players to display in the top half of the screen.\r\n     */\r\n    playersTop() {\r\n        let players = this.players();\r\n\r\n        return players.length > 4 ? players.slice(0, 4) : players;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * @returns {*[]} - Returns list of players to display in the bottom half of the screen.\r\n     */\r\n    playersBottom() {\r\n        let players = this.players();\r\n\r\n        return players.length > 4 ? players.slice(4, players.length) : [];\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"players-joining\">\r\n                <div className=\"players\">\r\n                    {this.playersTop().map(player =>\r\n                        <span key={player.name}>{player.name}</span>\r\n                    )}\r\n                    {this.playersTop().length === 0 ? <h2>No other players</h2> : null}\r\n                </div>\r\n                {this.props.playerIsHost ? <button className=\"button button--x-large\" onClick={this.startGame}>Start Game</button> : <h1>Waiting for host to start the game...</h1>}\r\n                <div className=\"players\">\r\n                    {this.playersBottom().map(player =>\r\n                        <span key={player.name}>{player.name}</span>\r\n                    )}\r\n                </div>\r\n                {this.state.errorMessage !== \"\" && <h1 className=\"error\">{this.state.errorMessage}</h1>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPlayersJoining.propTypes = {\r\n    gameCode: PropTypes.string,\r\n    playerName: PropTypes.string,\r\n    playerIsHost: PropTypes.bool,\r\n    players: PropTypes.array,\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class Card extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.card = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        let onResize = () => {\r\n            let windowHeight = window.innerHeight;\r\n            let windowWidth = window.innerWidth\r\n            let windowSize = windowHeight < windowWidth ? windowHeight : windowWidth;\r\n\r\n            this.card.current.style.height = `${windowSize * 0.175}px`;\r\n            this.card.current.style.width = `${windowSize * 0.1}px`;\r\n            this.card.current.style.fontSize = `${windowSize * 0.001}rem`;\r\n        };\r\n\r\n        window.addEventListener(\"resize\", onResize);\r\n        onResize();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * Gets the correct color for the given card.\r\n     *\r\n     * @param {number} value - Value of the card.\r\n     * @returns {string} - Returns the hex code for the card.\r\n     */\r\n    getCardColor(value) {\r\n        if (value < 0) {\r\n            return \"#00008b\";\r\n        } else if (value === 0) {\r\n            return \"#00e5e5\";\r\n        } else if (value >= 0 && value < 5) {\r\n            return \"#00FF00\";\r\n        } else if (value >= 5 && value < 9 ) {\r\n            return \"#E5E500\";\r\n        } else if (value >= 9) {\r\n            return \"#FF0000\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * Underlines the six and nine card to make them clearer.\r\n     *\r\n     * @returns {boolean} - Returns true if the card should be underlines.\r\n     */\r\n    underlineCard() {\r\n        return this.props.value === 6 || this.props.value === 9;\r\n    }\r\n\r\n    render() {\r\n        return this.props.isPlaceholder ? this.renderPlaceholder() : this.props.value === null ? this.renderBackSide() : this.renderFaceSide();\r\n    }\r\n\r\n    renderPlaceholder() {\r\n        return (\r\n            <div ref={this.card} className={`card card--placeholder ${this.props.isInteractable ? \"card--hover-effect\" : \"\"}`} onClick={this.props.isInteractable ? this.props.onClick : () => {}}>\r\n                {this.props.value}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderBackSide() {\r\n        return (\r\n            <div ref={this.card} className={`card card--back ${this.props.isInteractable ? \"card--hover-effect\" : \"\"}`} onClick={this.props.isInteractable ? this.props.onClick : () => {}}>\r\n                <span>Hi-Lo</span>\r\n                <span>Hi-Lo</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderFaceSide() {\r\n        return (\r\n            <div ref={this.card} className={`card card--face ${this.props.isInteractable ? \"card--hover-effect\" : \"\"}`} onClick={this.props.isInteractable ? this.props.onClick : () => {}} style={{background: this.getCardColor(this.props.value)}}>\r\n                <span className={this.underlineCard() ? \"card--underline-value\" : \"\"}>{this.props.value}</span>\r\n                <h1 className={this.underlineCard() ? \"card--underline-value\" : \"\"}>{this.props.value}</h1>\r\n                <span className={this.underlineCard() ? \"card--underline-value\" : \"\"}>{this.props.value}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nCard.propTypes = {\r\n    isPlaceholder: PropTypes.bool,\r\n    value: PropTypes.number,\r\n    isInteractable: PropTypes.bool,\r\n    onClick: PropTypes.func,\r\n}\r\n\r\nCard.defaultProps = {\r\n    isPlaceholder: false,\r\n    isInteractable: false,\r\n    onClick: () => {},\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport GamePhase from \"../GamePhase\";\r\nimport PlayerTurnPhase from \"../PlayerTurnPhase\";\r\nimport Card from \"./Card\";\r\nimport ApiService from \"../apiService\";\r\n\r\nexport default class PlayerBoard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.renderCards = this.renderCards.bind(this);\r\n        this.cardsInteractable = this.cardsInteractable.bind(this);\r\n        this.getCardAction = this.getCardAction.bind(this);\r\n        this.pickStartingCard = this.pickStartingCard.bind(this);\r\n        this.placeCard = this.placeCard.bind(this);\r\n        this.flipCard = this.flipCard.bind(this);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * Renders the cards in the correct order.\r\n     *\r\n     * @param {function} renderer - Function that renders the card.\r\n     * @returns {[]} - Returns the list of cards.\r\n     */\r\n    renderCards(renderer) {\r\n        let cards = [];\r\n\r\n        for (let i = 0; i < 3; i++)\r\n            for (let j in this.props.board.cards)\r\n                cards.push(renderer(this.props.board.cards[j][i], j, i));\r\n\r\n        return cards;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * Checks to see if a card is interactable.\r\n     *\r\n     * @param {number} cardColumn - Card's column.\r\n     * @param {number} cardRow - Card's row.\r\n     *\r\n     * @returns {boolean} - Returns true if a card is interactable.\r\n     */\r\n    cardsInteractable(cardColumn, cardRow) {\r\n        return (\r\n            (this.props.isClientsPlayersTurn && this.props.game.currentPhase === GamePhase.PLAYERS_PICKING_STARTING_CARDS) ||\r\n            (this.props.isClientsPlayersTurn && this.props.game.players[this.props.game.currentPlayerTurnIndex].turnPhase === PlayerTurnPhase.PLACING_CARD) ||\r\n            (this.props.isClientsPlayersTurn && this.props.game.players[this.props.game.currentPlayerTurnIndex].turnPhase === PlayerTurnPhase.REVEAL_CARD && !this.props.board.cards[cardColumn][cardRow].faceUp)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * Gets the correct action for the card.\r\n     *\r\n     * @param {number} cardColumn - Card's column.\r\n     * @param {number} cardRow - Card's row.\r\n     */\r\n    getCardAction(cardColumn, cardRow) {\r\n        if (this.props.isClientsPlayersTurn && this.props.game.currentPhase === GamePhase.PLAYERS_PICKING_STARTING_CARDS) {\r\n            this.pickStartingCard(cardColumn, cardRow);\r\n        } else if (this.props.isClientsPlayersTurn && this.props.game.players[this.props.game.currentPlayerTurnIndex].turnPhase === PlayerTurnPhase.PLACING_CARD) {\r\n            this.placeCard(cardColumn, cardRow);\r\n        } else if (this.props.isClientsPlayersTurn && this.props.game.players[this.props.game.currentPlayerTurnIndex].turnPhase === PlayerTurnPhase.REVEAL_CARD && !this.props.board.cards[cardColumn][cardRow].faceUp) {\r\n            this.flipCard(cardColumn, cardRow);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * Picks a player's starting card.\r\n     *\r\n     * @param {number} cardColumn - Card's column.\r\n     * @param {number} cardRow - Card's row.\r\n     */\r\n    pickStartingCard(cardColumn, cardRow) {\r\n        ApiService\r\n            .get(ApiService.URLS.pickStartingCard(this.props.game.gameCode), {column: cardColumn, row: cardRow});\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * Places a card from the player's hand onto their board.\r\n     *\r\n     * @param {number} cardColumn - Card's column.\r\n     * @param {number} cardRow - Card's row.\r\n     */\r\n    placeCard(cardColumn, cardRow) {\r\n        ApiService.get(\r\n            ApiService.URLS.placeCardOnBoard(this.props.game.gameCode),\r\n            {location: \"board\", column: cardColumn, row: cardRow}\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * Places a card from the player's hand onto their board.\r\n     *\r\n     * @param {number} cardColumn - Card's column.\r\n     * @param {number} cardRow - Card's row.\r\n     */\r\n    flipCard(cardColumn, cardRow) {\r\n        ApiService.get(\r\n            ApiService.URLS.revealCardOnBoard(this.props.game.gameCode), {column: cardColumn, row: cardRow});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.props.small ? \"small\" : \"\"}>\r\n                {\r\n                    (this.props.displayMessage && this.props.customDisplayMessage === \"\") &&\r\n                    <div className={`player-board-info ${this.props.centerMessage ? \"player-board-info__center\" : \"\"}`}>\r\n                        <div>\r\n                            <span><strong>Overall Score:</strong> {this.props.overallScore}</span>\r\n                            <br />\r\n                            <span><strong>Visible Score:</strong> {this.props.board.visibleScore}</span>\r\n                        </div>\r\n                        <span><strong>Number of Face Up Cards:</strong> {this.props.board.noOfFaceUpCards}</span>\r\n                    </div>\r\n                }\r\n                {\r\n                    (this.props.displayMessage && this.props.customDisplayMessage !== \"\") &&\r\n                    <div className={`player-board-info ${this.props.centerMessage ? \"player-board-info__center\" : \"\"}`}>\r\n                        {this.props.customDisplayMessage}\r\n                    </div>\r\n                }\r\n                <div className=\"player-board\">\r\n                    {this.renderCards((card, cardColumn, cardRow) =>\r\n                        <Card\r\n                            isPlaceholder={card.value === \"empty\"}\r\n                            key={`${cardColumn}-${cardRow}`}\r\n                            value={card.value}\r\n                            isInteractable={this.cardsInteractable(cardColumn, cardRow) && card.value !== \"empty\"}\r\n                            onClick={() => this.getCardAction(cardColumn, cardRow)}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPlayerBoard.propTypes = {\r\n    game: PropTypes.object,\r\n    board: PropTypes.object,\r\n\r\n    isClientsPlayersTurn: PropTypes.bool,\r\n    clientPlayerTurnPhase: PropTypes.number,\r\n\r\n    overallScore: PropTypes.number,\r\n\r\n    displayMessage: PropTypes.bool,\r\n    customDisplayMessage: PropTypes.string,\r\n    centerMessage: PropTypes.bool,\r\n\r\n    small: PropTypes.bool,\r\n}\r\n\r\nPlayerBoard.defaultProps = {\r\n    isClientsPlayersTurn: false,\r\n\r\n    overallScore: null,\r\n\r\n    displayMessage: false,\r\n    customDisplayMessage: \"\",\r\n    centerMessage: false,\r\n\r\n    small: false,\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Card from \"./Card\";\r\nimport ApiService from \"../apiService\";\r\n\r\n\r\nexport default class CardStacks extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * Gets the correct action to perform.\r\n     *\r\n     * @param {string} deck - The deck this action is called from.\r\n     */\r\n    getCardAction(deck) {\r\n        if (this.props.clientPlayerPickCard)\r\n            this.takeCardIntoHand(deck);\r\n        else if (this.props.clientPlayerDiscardCard && deck === \"discard\")\r\n            this.discardCardFromHand();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * Takes a card from either deck into the player's hand.\r\n     *\r\n     * @param {string} deck - Deck to take card from.\r\n     */\r\n    takeCardIntoHand(deck) {\r\n        ApiService.get(ApiService.URLS.takeCardIntoHand(this.props.gameCode), {deck: deck});\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * Discard the player's card to the discard pile\r\n     */\r\n    discardCardFromHand() {\r\n        ApiService\r\n            .get(ApiService.URLS.placeCardOnBoard(this.props.gameCode), {deck: \"discard\"});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card-stacks\">\r\n                {\r\n                    (this.props.cardInHand !== undefined && this.props.cardInHand !== null) &&\r\n                    <span title=\"Draw Deck\">\r\n                        <span>Card in Hand</span>\r\n                        <Card value={this.props.cardInHand.value} />\r\n                    </span>\r\n                }\r\n\r\n                <span title=\"Draw Deck\">\r\n                    <span>Draw Deck</span>\r\n                    <Card\r\n                        isPlaceholder={this.props.stack.length === 0}\r\n                        value={this.props.stack.length === 0 ? \"Stack\" : this.props.stack[0].value}\r\n                        isInteractable={this.props.clientPlayerPickCard}\r\n                        onClick={() => this.getCardAction(\"draw\")}\r\n                    />\r\n                </span>\r\n\r\n                <span title=\"Discard Deck\">\r\n                    <span>Discard Deck</span>\r\n                    {/* TODO: Create discard placeholder to players can place a card here even when there is no card in the discard */}\r\n                    <Card\r\n                        isPlaceholder={this.props.discard.length === 0}\r\n                        value={this.props.discard.length === 0 ? \"Discard\" : this.props.discard[0].value}\r\n                        isInteractable={this.props.clientPlayerPickCard || this.props.clientPlayerDiscardCard}\r\n                        onClick={() => this.getCardAction(\"discard\")}\r\n                    />\r\n                </span>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nCardStacks.propTypes = {\r\n    gameCode: PropTypes.string,\r\n    clientPlayerPickCard: PropTypes.bool,\r\n    clientPlayerDiscardCard: PropTypes.bool,\r\n    cardInHand: PropTypes.object,\r\n    stack: PropTypes.array,\r\n    discard: PropTypes.array,\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ApiService from \"../apiService\";\r\nimport GamePhase from \"../GamePhase\";\r\nimport PlayerTurnPhase from \"../PlayerTurnPhase\";\r\nimport PlayersJoining from \"../components/PlayersJoining\";\r\nimport PlayerBoard from \"../components/PlayerBoard\";\r\nimport CardStacks from \"../components/CardStacks\";\r\n\r\nexport default class Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            game: null,\r\n            checkedForPlayerHost: false,\r\n            playerIsHost: false,\r\n        }\r\n\r\n        this.updateGameState = this.updateGameState.bind(this);\r\n        this.getClientPlayer = this.getClientPlayer.bind(this);\r\n        this.isClientPlayersTurn = this.isClientPlayersTurn.bind(this);\r\n        this.startNextRound = this.startNextRound.bind(this);\r\n        this.endGame = this.endGame.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateGameState();\r\n\r\n        this.ws = new WebSocket(ApiService.WS_URLS.game(this.props.gameCode));\r\n\r\n        this.ws.addEventListener(\"message\",  (event) => {\r\n            let data = JSON.parse(event.data);\r\n\r\n            if (data.event === `update:game:${this.props.gameCode}` && data.game !== undefined)\r\n                this.setState({game: data.game});\r\n            else if (data.event === `update:game:${this.props.gameCode}` && data.game === undefined)\r\n                window.location.reload(true);\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.ws !== undefined)\r\n            this.ws.close();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.state.game !== null && !this.state.checkedForPlayerHost)\r\n            for (let player of this.state.game.players)\r\n                if (player.name === this.props.playerName && player.isHost)\r\n                    this.setState({playerIsHost: true, checkedForPlayerHost: true});\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * Updates the game.\r\n     */\r\n    updateGameState() {\r\n        ApiService\r\n            .get(ApiService.URLS.gameState(this.props.gameCode))\r\n            .then(resp => {\r\n                if (resp.hasOwnProperty(\"error\"))\r\n                    this.props.noGameExists();\r\n                else\r\n                    this.setState({game: resp});\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * Starts the next game round.\r\n     */\r\n    startNextRound() {\r\n        ApiService.get(ApiService.URLS.startNextRound(this.props.gameCode));\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * Ends the game\r\n     */\r\n    endGame() {\r\n        ApiService.get(ApiService.URLS.endGame(this.props.gameCode));\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * Gets the correct message to display.\r\n     *\r\n     * @returns {string|null}\r\n     */\r\n    getGameMessage() {\r\n        let message = \"\";\r\n\r\n        if (this.state.game.currentPhase === GamePhase.PLAYERS_PICKING_STARTING_CARDS && this.isClientPlayersTurn()) {\r\n            message = \"Pick two starting cards\";\r\n        } else if (this.state.game.currentPhase === GamePhase.PLAYERS_PICKING_STARTING_CARDS && !this.isClientPlayersTurn()) {\r\n            message = \"Other players are picking their two starting cards\";\r\n        } else if(this.state.game.currentPhase === GamePhase.PLAYERS_JOINING) {\r\n            message = <span>GAME CODE: <strong>{this.props.gameCode}</strong></span>\r\n        } else if ((this.state.game.currentPhase === GamePhase.PLAYER_TURN || this.state.game.currentPhase === GamePhase.FINAL_ROUND) && this.isClientPlayersTurn()) {\r\n            if (this.getClientPlayer().turnPhase === PlayerTurnPhase.PICKING_CARD) {\r\n                message = \"Pick a card from either the deck or discard\";\r\n            } else if (this.getClientPlayer().turnPhase === PlayerTurnPhase.PLACING_CARD) {\r\n                message = \"Place the card on your board or on the discard\";\r\n            } else if (this.getClientPlayer().turnPhase === PlayerTurnPhase.REVEAL_CARD) {\r\n                message = \"Flip a card face up\";\r\n            } else {\r\n                message = \"It is your turn\";\r\n            }\r\n        } else if ((this.state.game.currentPhase === GamePhase.PLAYER_TURN || this.state.game.currentPhase === GamePhase.FINAL_ROUND)&& !this.isClientPlayersTurn()) {\r\n            message = `It is ${this.state.game.players[this.state.game.currentPlayerTurnIndex].name}'s turn`;\r\n        } else if (this.state.game.currentPhase === GamePhase.ROUND_END) {\r\n            message = \"Round is over\";\r\n        }\r\n\r\n        return this.state.game.currentPhase === GamePhase.FINAL_ROUND ? `Final Round, ${message}` : message;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * Gets the details for the clients player.\r\n     *\r\n     * @returns {*} - Returns the player.\r\n     */\r\n    getClientPlayer() {\r\n        return this.state.game.players.find(player => player.name === this.props.playerName);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * @returns {boolean} - Returns true if it is the clients turn.\r\n     */\r\n    isClientPlayersTurn() {\r\n        return this.state.game.players.indexOf(this.getClientPlayer()) === this.state.game.currentPlayerTurnIndex;\r\n    }\r\n\r\n    render() {\r\n        return this.state.game === null ? <h1>Loading...</h1> : (\r\n            <>\r\n                <div className=\"game-top-bar\">\r\n                    <h1 className=\"game-top-bar__title\">Hi-Lo</h1>\r\n                    <div className=\"game-top-bar__message\">\r\n                        {this.getGameMessage()}\r\n                    </div>\r\n                    <div className=\"game-top-bar__details\">\r\n                        <span className=\"game-top-bar__detail\"><strong>Player Name:</strong> <span>{this.props.playerName}</span></span>\r\n                        <span className=\"game-top-bar__detail\"><strong>Game Code:</strong> {this.props.gameCode}</span>\r\n                        <span className=\"game-top-bar__detail\"><strong>No. of Players:</strong> {this.state.game.players.length}/8</span>\r\n                    </div>\r\n                </div>\r\n\r\n                {\r\n                    this.state.game.currentPhase === GamePhase.PLAYERS_JOINING &&\r\n                    <PlayersJoining\r\n                        gameCode={this.props.gameCode}\r\n                        playerName={this.props.playerName}\r\n                        playerIsHost={this.state.playerIsHost}\r\n                        players={this.state.game.players}\r\n                    />\r\n                }\r\n\r\n                {\r\n                    (this.state.game.currentPhase === GamePhase.PLAYERS_PICKING_STARTING_CARDS || this.state.game.currentPhase === GamePhase.PLAYER_TURN || this.state.game.currentPhase === GamePhase.FINAL_ROUND) &&\r\n                    <div className=\"play-area\">\r\n                        <div className=\"play-area__right\">\r\n                            <CardStacks\r\n                                gameCode={this.props.gameCode}\r\n                                clientPlayerPickCard={\r\n                                    (this.state.game.currentPhase === GamePhase.PLAYER_TURN || this.state.game.currentPhase === GamePhase.FINAL_ROUND) &&\r\n                                    this.getClientPlayer().turnPhase === PlayerTurnPhase.PICKING_CARD &&\r\n                                    this.isClientPlayersTurn()\r\n                                }\r\n                                clientPlayerDiscardCard={\r\n                                    (this.state.game.currentPhase === GamePhase.PLAYER_TURN || this.state.game.currentPhase === GamePhase.FINAL_ROUND) &&\r\n                                    this.getClientPlayer().turnPhase === PlayerTurnPhase.PLACING_CARD &&\r\n                                    this.isClientPlayersTurn()\r\n                                }\r\n                                cardInHand={this.getClientPlayer().cardInHand}\r\n                                stack={this.state.game.stack.stack}\r\n                                discard={this.state.game.discard.stack}\r\n                            />\r\n                            <PlayerBoard\r\n                                game={this.state.game}\r\n                                isClientsPlayersTurn={this.isClientPlayersTurn()}\r\n                                board={this.getClientPlayer().board}\r\n                                overallScore={this.getClientPlayer().overallScore}\r\n                                displayMessage={true}\r\n                            />\r\n                        </div>\r\n                        <div className=\"play-area__other-players-board\">\r\n                            {this.state.game.players.filter(player => player.name !== this.getClientPlayer().name).map((player, i) =>\r\n                                <PlayerBoard\r\n                                    key={i}\r\n                                    game={this.state.game}\r\n                                    board={player.board}\r\n                                    displayMessage={true}\r\n                                    customDisplayMessage={<h3>{player.name} {this.state.game.players[this.state.game.currentPlayerTurnIndex].name === player.name ? \"(Their Turn)\" : \"\"}</h3>}\r\n                                    centerMessage={true}\r\n                                    small={true}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                }\r\n\r\n                {\r\n                    (this.state.game.currentPhase === GamePhase.ROUND_END || this.state.game.currentPhase === GamePhase.GAME_END) &&\r\n                    <div className=\"round-end-area\">\r\n                        <h1 className=\"round-end__message\">\r\n                            {this.state.game.currentPhase === GamePhase.ROUND_END && \"Round End\"}\r\n                            {\r\n                                this.state.game.currentPhase === GamePhase.GAME_END &&\r\n                                <>\r\n                                    Game End,&nbsp;\r\n                                    {this.state.game.players.sort((a, b) => a.overallScore - b.overallScore)[0].name} wins!\r\n                                </>\r\n                            }\r\n                        </h1>\r\n                        <table className=\"scores-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Score this round</th>\r\n                                    <th>Overall Score</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.state.game.players.map(player =>\r\n                                    <tr>\r\n                                        <td>{player.name}</td>\r\n                                        <td>{player.board.visibleScore}</td>\r\n                                        <td>{player.overallScore}</td>\r\n                                    </tr>\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                        {\r\n                            this.state.game.currentPhase === GamePhase.ROUND_END &&\r\n                            <>\r\n                                {this.state.playerIsHost && <button className=\"button button--x-large\" onClick={this.startNextRound}>Start Next Round</button>}\r\n                                {!this.state.playerIsHost && <h1>Waiting for host to start next round...</h1>}\r\n                            </>\r\n                        }\r\n                        {\r\n                            this.state.game.currentPhase === GamePhase.GAME_END &&\r\n                            <>\r\n                                {this.state.playerIsHost && <button className=\"button button--x-large\" onClick={this.endGame}>End Game</button>}\r\n                                {!this.state.playerIsHost && <h1>Waiting for host to end game...</h1>}\r\n                            </>\r\n                        }\r\n                    </div>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nGame.propTypes = {\r\n    playerName: PropTypes.string,\r\n    gameCode: PropTypes.string,\r\n    noGameExists: PropTypes.func,\r\n}\r\n","import React from \"react\";\nimport HostJoin from \"./HostJoin\";\nimport \"../../stylesheets/style.css\";\nimport Game from \"./Game\";\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showHostJoinPage: true,\n            playerName: \"\",\n            gameCode: \"\",\n        }\n\n        this.joinGame = this.joinGame.bind(this);\n    }\n\n    componentDidMount() {\n        if (sessionStorage.hasOwnProperty(\"gameDetails\")) {\n            let gameDetails = JSON.parse(sessionStorage.getItem(\"gameDetails\"));\n            this.setState({\n                showHostJoinPage: false,\n                playerName: gameDetails.playerName,\n                gameCode: gameDetails.gameCode,\n            });\n        }\n    }\n\n    /**\n     * @private\n     *\n     * Joins a game\n     *\n     * @param {string} playerName - Name of the player.\n     * @param {string} gameCode - Game's code.\n     */\n    joinGame(playerName, gameCode) {\n        sessionStorage.setItem(\"gameDetails\", JSON.stringify({\n            playerName: playerName,\n            gameCode: gameCode,\n        }));\n\n        this.setState({\n            showHostJoinPage: false,\n            playerName: playerName,\n            gameCode: gameCode,\n        });\n    }\n\n    render() {\n        return (\n            <>\n                {this.state.showHostJoinPage && <HostJoin joinGame={this.joinGame} />}\n                {!this.state.showHostJoinPage && <Game\n                    playerName={this.state.playerName}\n                    gameCode={this.state.gameCode}\n                    noGameExists={() => this.setState({showHostJoinPage: true})}\n                />}\n            </>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./pages/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}